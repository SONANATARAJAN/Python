# -*- coding: utf-8 -*-
"""CLASS_AND_OBJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-1AAG1pQqdXlnjlbKtLE_bHutpYUDLDY

## **Class and object**
"""

class demo():
  pass
a=10
print(type(a))
print(type(demo))  #python class vanthu type kulla iruku
swift= demo()  #object
print(isinstance(swift,demo))
print(isinstance(a,int)) #integer class oda object
print(isinstance(a,float))
print(type(swift))

"""**CLASS** **ATTRIBUTES**"""

#getattr
class demo():
  name="ram"
  age=43

print(getattr(demo,"name"))
#dot dotation
print(demo.age)

#setattr
class demo():
  name="ram"
  age=43

  setattr(demo,"name","sona")
  print(demo.name)

  #dot dotation

demo.gender = "male"
print(demo.gender)

del demo.gender
print(demo.__dict__)

"""**INSTANCE ATTRIBUTES**"""

class stu():
  course = "java"

o=stu()
print(o.__dict__)
print(o.course)
print(stu.__dict__)
o.course= "python"
print(o.course)
print(o.__dict__)


o2=stu()
print(o2.course)

"""**CLASS METHOD**"""

class student():
  name="anos"
  age=21
  def printall():
    print("name :",student.name)
    print("age :",student.age)
student.printall()
print(student.__dict__)
print(getattr(student,"printall"))
getattr(student,"printall")()

"""**INSTANCE METHOD**"""

class student():
  name= "sona"
  age= 22
  def printall(self,gender):
    print("name :",student.name)
    print("age :",student.age)
    print("gender:",gender)
o= student()
o.printall("female")
#student.printall(o)  proper method

"""INIT **METHOD**"""

class user():
  def __init__(self):
    print("call when new instance is created")
o=user()

class user():
  def __init__(self,name):
    #print("call when new instance is created")
    self.name =name #instance nan kudukura name ah add paniko
  def printall(self):
    print("Name :",self.name)
o=user("amos")
o.printall()
o1=user("praveen")
o1.printall()
o2=user("abi")
print(o2.__dict__)

"""**PROPERTy DECORATOR**"""

class user:
  def __init__(self, name , age):
    self.name=name
    self.age=age
    self.msg=self.name + "  is  " + str(self.age) +"  years old"
o=user("sona",25)
print(o.name)
print(o.age)
print(o.msg)
o.age =45
print(o.msg)

class user:
  def __init__(self, name , age):
    self.name=name
    self.age=age
  @property
  def msg(self):
      return self.name + "  is  " + str(self.age) +"  years old"
o=user("sona",25)
print(o.name)
print(o.age)
print(o.msg)
o.age = 45
print(o.msg)

"""**PROPERTY DECORATOR GETTER AND SETTER**"""

class student:
  def __init__(self,total):
    self._total =total
  def average(self):
    return self._total/5.0
  @property
  def total(self):
      return self._total
  @total.setter
  def total(self,t):
    if t<=0 or t>=500:
      print("invalid")
    else:
      self._total=t



o=student(450)
print("Total :",o.total)
print("Average :",o.average())
o=student(-8)
print("total :",o.total)
print("Average :",o.average())

"""**PROPERTY METHOD**"""

class student:
  def __init__(self,total):
    self._total =total
  def average(self):
    return self._total/5.0

  def getter(self):
      return self._total

  def setter(self,t):
    if t < 0 or t > 500:
      print("invalid")
    else:
      self._total = t
  total=property(getter,setter)



o=student(450)
print("Total :",o.total)
print("Average :",o.average())
o=student(500)
print("total :",o.total)
print("Average :",o.average())

"""**CLASS METHOD DECORATOR**"""

class student():
  count=0
  def __init__(self,name,age):
    self.name=name
    self.age=age
    student.count+=1
  def printDetail(self):
    return print("Name :",self.name,"age :",self.age)
  @classmethod
  def total(cls):
    return cls.count

o=student("sona",21)
o.printDetail()
print("total admission",student.total())
o=student("anos",22)
o.printDetail()

print("total admission",student.total())

